
public class DoublyLinkedList {

	private Node head;
	private Node tail;
	private int size = 0;

	private class Node {
		int element;
		Node next;
		Node prev;


		public Node(int element) {
			this.element = element;
		}

	}
	
	public static void main(String a[]){
        
        DoublyLinkedList dll = new DoublyLinkedList();
        dll.addAtFirst(10);
        dll.display();
        dll.addAtFirst(34);
        dll.display();
        dll.addAtLast(56);
        dll.display();
        dll.addAtLast(364);
        dll.display();
        dll.addAtIndex(3,59);
        dll.display();
        dll.removeAtFirst();
        dll.display();
        dll.removeAtLast();
        dll.display();
		dll.removeElementAtIndex(2);
		dll.display();
		dll.findNodeAtIndex(3);
    }


	public void addAtFirst(int element) {
		Node newNode = new Node(element);
		if(head == null) {  
            head = tail = newNode;  
            head.prev = null;  
            tail.next = null;  
        }  
		else if (head != null) {
			head.prev = newNode;
			newNode.next = head;
			newNode.prev = null;
			head = newNode;
			
		}
		size++;
		System.out.println("adding at first: " + element);
	}

	public void addAtLast(int element) {

		Node newNode = new Node(element);  
        if(head == null) {  
            head = tail = newNode;  
            head.prev = null;  
            tail.next = null;  
        }  
        else {  
            tail.next = newNode;  
            newNode.prev = tail;  
            tail = newNode;  
            tail.next = null;  
        }  
		size++;
		System.out.println("adding at last: " + element);
	}

	public void addAtIndex(int index, int element) {
		if (index < 0 || index > size) {
			System.out.println("can't insert at that index:" + index);
			return;
		}
		Node newNode = new Node(element);
		if (head == null) {
			head = newNode;
			tail = newNode;
		} else if (index == 0) {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
			head.prev = null;
		} else if (index == size) {
			newNode.prev = tail.prev;
			newNode.next = tail;
			tail.prev.next = newNode;
			tail.prev = newNode;
		} else {
			Node nodeRef = head;
			for (int i = 1; i < index; i++)
				nodeRef = nodeRef.next;

			newNode.next = nodeRef;
			newNode.prev = nodeRef.prev;
			nodeRef.prev.next = newNode;
			nodeRef.prev = newNode;
		}
		size++;
		System.out.println("added at Index:"+index);
	}
	
	public void display() {    
        if(head == null) {  
            System.out.println("List is empty");  
            return;  
        }  
        Node current = head;
        while(current != null) {  
  
            System.out.print(current.element + " ");  
            current = current.next;  
        }  
        System.out.println();  
    }  

	public void removeAtFirst() {
		if(head == null) {  
            return;  
        }  
        else {  
            if(head != tail) {  
                head = head.next;  
                head.prev = null;  
            }  
            else {  
                head = tail = null;  
            }  
        }  
		size--;
		System.out.println("Removed at First");
		
	}

	public void removeAtLast() {
		 if(head == null) {
			 System.out.println("List is empty");
	            return;  
	        }  
	        else {  
	            if(head != tail) {  
	                tail = tail.prev;  
	                tail.next = null;  
	            }  
	            else {  
	                head = tail = null;  
	            }  
	        }  
		 size--;
		System.out.println("Removed at Last");
	}

	public void removeElementAtIndex(int index) {
		if (head == null) {
			System.out.println("List is empty");
			return;
		} else {
			Node current = head;

			for (int i = 1; i < index; i++) {
				current = current.next;
			}

			if (current == head) {
				head = current.next;
				head.prev = null;
			} else if (current == tail) {
				tail = tail.prev;
				tail.next = null; 
			} else {
				current.prev.next = current.next;
				current.next.prev = current.prev;
			}
		}
		size--;
		System.out.println("Removed at Index:"+index);
	}

	private void findNodeAtIndex(int index) {
		if(head == null) {  
            System.out.println("List is empty");  
            return;  
        }  
		if (index < 1 || index > size) {
			System.out.println("can't find at that index:" + index);
			return;
		}
		
		Node current = head;
        for(int i = 1; i < index; i++) {
        	current = current.next;
        }
        System.out.println("Node at Index:"+index+" is "+current.element);
		
	}
}
